3.1) 

The best type of graph to solve this problem would be a directed graph. This is because
the connections between cities that are given in connectedCities.txt are listed as 
unidirectional routes. This means that the connection between the cities only work in one 
direction. Thus, a directed graph would be perfect to solve this problem, as all the edges
in a directed graph are also unidirectional

The nodes in the graph represent the cities in the United States that we will be traveling to.
The edges in the graph represent the connections between cities. That is to say it is only 
valid to directly travel from city A to city B if there exists an edge in the graph from A to B. 

The basic algorithms that will be used to find paths between the cities are depth first search 
and breadth first search. What these algorithms provide is a way to determine connectivity 
in the graph. When dfs or bfs are used, we keep track of which cities are "marked" and this helps
us understand if it is possible to find a route from the source (Boston) to other nodes in the 
graph. We also keep track of an "edgeTo" for each city to let us the last city that was visited. 
By using this information, we can backtrack through the "edgeTo" information to let the algorithm
tell us a path of vertices to get from the source (Boston) to the destination (Minneapolis). 

For the problem in section 3.4), dijkstra's algorithm can be used to solve the shortest path 
problem. Dijkstra's algorithm is a greedy algorithm which always focuses on picking the lowest 
cost path from one city to another. It keeps track of the lowest cost for each city and will 
update this information if it finds a better route. It systematically searches through every 
vertex and edge in the graph to guarantee it finds the shortest (lowest cost) route. 

3.2)

In the case of my implementations, both the dfs and bfs algorithms run in the same amount of
time. This is because each algorithm needs to search through all vertices and edges to ensure
that all cities have been explored. However, the breadth first search algorithm found a path 
that has fewer steps overall (5 edges for bfs compared to 7 edges for dfs). This will remain 
if the number of stops or cities increases. This is because of the nature of bfs. It starts at
the source and investigates everything distance 1 away from the source. Then, in the next pass,
it investigates everything distance 2 away from the source, and so on. So, the first time bfs
reaches a city, it is promised to be the shortest distance from the source to that city. However,
depth first search is recursive and will return a path that is dependent on the order that the
adjacency lists are read. This means that the paths returned by dfs are varied in length and not
promised to be the shortest. So yes, in general, even if the number of cities/stops are increased,
bfs will still return the path with fewer cities in between. 

3.4)

The run time complexity of this problem is proportional the sum of the degrees of edges and vertices
in the graph (O(E*logV)). This is because dijkstra's algorithm iterates through every vertex in the
graph and for each vertex, adds all of its adjacent edges to the priority queue. So yes, adding
more cities or more stops between the cities will increase the complexity of the problem because
adding more cities or more stops adds more vertices and edges to the graph, increasing the run
time. However, I do not think that increasing the number of restaurants significantly increases
the complexity of the problem. To find the shortest path, all you need to do is select the smallest 
element from the list of restaurants at each city and keep track of the shortest paths using 
dijkstra's algorithm. Adding more restaurants just means that more preprocessing work will need to
be done to determine which restaurants each city has. But from that point, all you need to do is select
the minimum, which is not a very complex task. As long as you can select the min easily, the 
implementation of dijkstra's shortest path will not become any more complex. 

